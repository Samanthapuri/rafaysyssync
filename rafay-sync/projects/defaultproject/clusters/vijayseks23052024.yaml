apiVersion: infra.k8smgmt.io/v3
kind: Cluster
metadata:
  name: vijayseks23052024
  project: defaultproject
spec:
  blueprintConfig:
    name: minimal
  cloudCredentials: vijaysrole
  config:
    addons:
    - name: coredns
      version: latest
    - name: kube-proxy
      version: latest
    - name: aws-ebs-csi-driver
      serviceAccountRoleARN: arn:aws:iam::679196758854:role/ebscsicontrollervijaysrole26
      version: latest
    - name: vpc-cni
      serviceAccountRoleARN: arn:aws:iam::679196758854:role/vijaysvpccnirole26
      version: v1.18.1-eksbuild.1
    iam:
      serviceAccounts:
      - attachPolicyARNs:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
        metadata:
          name: ebs-csi-controller-sa
          namespace: kube-system
        roleName: ebscsicontrollervijaysrole26
        roleOnly: true
      - attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        metadata:
          name: aws-node
          namespace: kube-system
        roleName: vijaysvpccnirole26
        roleOnly: true
      withOIDC: true
    metadata:
      name: vijayseks23052024
      region: us-west-2
      tags:
        email: vijaysamanthapuri@rafay.co
        env: cs-demo
      version: "1.29"
    network:
      cni:
        name: aws-cni
        params:
          customCniCrdSpec:
            us-west-2a:
            - securityGroups:
              - sg-0f4021b2dc09124d4
              subnet: subnet-04a4f0d7703a6019d
            us-west-2b:
            - securityGroups:
              - sg-0f4021b2dc09124d4
              subnet: subnet-0ce592c166364df2b
            us-west-2c:
            - securityGroups:
              - sg-0f4021b2dc09124d4
              subnet: subnet-06837762030effed4
    nodeGroups:
    - amiFamily: AmazonLinux2
      desiredCapacity: 2
      iam:
        instanceRoleARN: arn:aws:iam::679196758854:role/vijaysworkerrole
      instanceType: t3.xlarge
      maxSize: 2
      minSize: 2
      name: vijays-ng
      preBootstrapCommands:
      - |
        #!/bin/bash -xe
        echo LS0tCmFwaVZlcnNpb246IG5vZGUuZWtzLmF3cy92MWFscGhhMQpraW5kOiBOb2RlQ29uZmlnCnNwZWM6CiAgY2x1c3RlcjoKICAgIG5hbWU6ICR7Q0xVU1RFUl9OQU1FfQogICAgYXBpU2VydmVyRW5kcG9pbnQ6ICR7RU5EUE9JTlR9CiAgICBjZXJ0aWZpY2F0ZUF1dGhvcml0eTogJHtDRVJUREFUQX0KICAgIGNpZHI6ICR7Q0lEUn0K | base64 -d > /tmp/nodetemplate_config
        read -r CLUSTER_NAME ENDPOINT CERTDATA CIDR <<< `aws eks describe-cluster --name vijayseks23052024 | jq '.cluster | [.name,.endpoint,.certificateAuthority.data,.kubernetesNetworkConfig.serviceIpv4Cidr] | @tsv' -r`
        export CLUSTER_NAME ENDPOINT CERTDATA CIDR
        envsubst < /tmp/nodetemplate_config > /root/nodeconfig
        nodeadm init -c file:///root/nodeconfig
      privateNetworking: true
      ssh:
        allow: true
        publicKeyName: awskey
      tags:
        email: vijaysamanthapuri@rafay.co
        env: cs-demo
      version: "1.29"
      volumeEncrypted: true
      volumeSize: 80
      volumeType: gp3
    vpc:
      clusterEndpoints:
        privateAccess: true
        publicAccess: false
      id: null
      subnets:
        private:
          private-01:
            id: subnet-01191eb45bbc20289
          private-02:
            id: subnet-0c2ace7c1bd6f389d
          private-03:
            id: subnet-0700983bf90ca0ec6
  type: aws-eks
